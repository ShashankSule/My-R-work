KBSdrama = dramadata[dramadata$Producer==2,]
KBSdrama$Schedule = as.factor(KBSdrama$Schedule)
modelString <-"
model {
## likelihood
for (j in 1:J){
mu_j[j] ~ dnorm(mu, invtau2)
}
## priors
for (j in 1:J){
mu_j[j] ~ dnorm(mu, invtau2)
}
invsigma2 ~ dgamma(a_g, b_g)
sigma <- sqrt(pow(invsigma2, -1))
## hyperpriors
mu ~ dnorm(mu0, 1/g0^2)
invtau2 ~ dgamma(a_t, b_t)
tau <- sqrt(pow(invtau2, -1))
}
"
y = KBSdrama$Rating
schedule = KBSdrama$Schedule
N = length(y)
J = length(unique(schedule))
initsfunction <- function(chain){
.RNG.seed <- c(1,2)[chain]
.RNG.name <- c("base::Super-Duper",
"base::Wichmann-Hill")[chain]
return(list(.RNG.seed=.RNG.seed,
.RNG.name=.RNG.name))
}
the_data <- list("y" = y, "schedule" = schedule, "N" = N, "J" = J,
"mu0" = 0.1, "g0" = 0.5,
"a_t" = 1, "b_t" = 1,
"a_g" = 1, "b_g" = 1)
posterior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("mu", "tau", "mu_j", "sigma"),
adapt = 1000,
burnin = 5000,
sample = 5000,
thin = 1,
inits = initsfunction)
summary(posterior)
plot(posterior, vars = "mu_j[1]")
plot(posterior, vars = "tau")
modelString <-"
model {
## likelihood
for (i in 1:N){
y[i] ~ dnorm(mu_j[schedule[i]], invsigma2)
}
## priors
for (j in 1:J){
mu_j[j] ~ dnorm(mu, invtau2)T(0,)
}
invsigma2 ~ dgamma(a_g, b_g)
sigma <- sqrt(pow(invsigma2, -1))
## hyperpriors
mu ~ dnorm(mu0, 1/g0^2)
invtau2 ~ dgamma(a_t, b_t)
tau <- sqrt(pow(invtau2, -1))
}
"
y = KBSdrama$Rating
dramadata = read.csv("KDramaData.csv", header=T)
KBSdrama = dramadata[dramadata$Producer==2,]
KBSdrama$Schedule = as.factor(KBSdrama$Schedule)
modelString <-"
model {
## likelihood
for (i in 1:N){
y[i] ~ dnorm(mu_j[schedule[i]], invsigma2)
}
## priors
for (j in 1:J){
mu_j[j] ~ dnorm(mu, invtau2)T(0,)
}
invsigma2 ~ dgamma(a_g, b_g)
sigma <- sqrt(pow(invsigma2, -1))
## hyperpriors
mu ~ dnorm(mu0, 1/g0^2)
invtau2 ~ dgamma(a_t, b_t)
tau <- sqrt(pow(invtau2, -1))
}
"
y = KBSdrama$Rating
schedule = KBSdrama$Schedule
N = length(y)
J = length(unique(schedule))
initsfunction <- function(chain){
.RNG.seed <- c(1,2)[chain]
.RNG.name <- c("base::Super-Duper",
"base::Wichmann-Hill")[chain]
return(list(.RNG.seed=.RNG.seed,
.RNG.name=.RNG.name))
}
the_data <- list("y" = y, "schedule" = schedule, "N" = N, "J" = J,
"mu0" = 0.1, "g0" = 0.5,
"a_t" = 1, "b_t" = 1,
"a_g" = 1, "b_g" = 1)
posterior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("mu", "tau", "mu_j", "sigma"),
adapt = 1000,
burnin = 5000,
sample = 5000,
thin = 1,
inits = initsfunction)
summary(posterior)
plot(posterior, vars = "mu_j[1]")
modelString <-"
model {
## likelihood
for (i in 1:N){
y[i] ~ dnorm(mu_j[schedule[i]], invsigma2)
}
## priors
for (j in 1:J){
mu_j[j] ~ dlnorm(mu, invtau2)
}
invsigma2 ~ dgamma(a_g, b_g)
sigma <- sqrt(pow(invsigma2, -1))
## hyperpriors
mu ~ dnorm(mu0, 1/g0^2)
invtau2 ~ dgamma(a_t, b_t)
tau <- sqrt(pow(invtau2, -1))
}
"
y = KBSdrama$Rating
schedule = KBSdrama$Schedule
N = length(y)
J = length(unique(schedule))
initsfunction <- function(chain){
.RNG.seed <- c(1,2)[chain]
.RNG.name <- c("base::Super-Duper",
"base::Wichmann-Hill")[chain]
return(list(.RNG.seed=.RNG.seed,
.RNG.name=.RNG.name))
}
the_data <- list("y" = y, "schedule" = schedule, "N" = N, "J" = J,
"mu0" = 0.1, "g0" = 0.5,
"a_t" = 1, "b_t" = 1,
"a_g" = 1, "b_g" = 1)
posterior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("mu", "tau", "mu_j", "sigma"),
adapt = 1000,
burnin = 5000,
sample = 5000,
thin = 1,
inits = initsfunction)
summary(posterior)
exp(1)
modelString <-"
model {
## likelihood
for (i in 1:N){
y[i] ~ dnorm(exp(mu_j[schedule[i]]), invsigma2)
}
## priors
for (j in 1:J){
mu_j[j] ~ dlnorm(mu, invtau2)
}
invsigma2 ~ dgamma(a_g, b_g)
sigma <- sqrt(pow(invsigma2, -1))
## hyperpriors
mu ~ dnorm(mu0, 1/g0^2)
invtau2 ~ dgamma(a_t, b_t)
tau <- sqrt(pow(invtau2, -1))
}
"
y = KBSdrama$Rating
schedule = KBSdrama$Schedule
N = length(y)
J = length(unique(schedule))
initsfunction <- function(chain){
.RNG.seed <- c(1,2)[chain]
.RNG.name <- c("base::Super-Duper",
"base::Wichmann-Hill")[chain]
return(list(.RNG.seed=.RNG.seed,
.RNG.name=.RNG.name))
}
the_data <- list("y" = y, "schedule" = schedule, "N" = N, "J" = J,
"mu0" = 0.1, "g0" = 0.5,
"a_t" = 1, "b_t" = 1,
"a_g" = 1, "b_g" = 1)
posterior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("mu", "tau", "mu_j", "sigma"),
adapt = 1000,
burnin = 5000,
sample = 5000,
thin = 1,
inits = initsfunction)
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(gridExtra)
require(ProbBayes)
require(tidyverse)
require(runjags)
require(coda)
require(devtools)
crcblue <- "#2905a1"
knitr::opts_chunk$set(echo = TRUE)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
## write the model
modelString <-"
model {
## sampling
for (i in 1:N){
y[i] ~ dnorm(beta0 + beta1*x[i], invsigma2)
}
## priors
beta1 <- (mu2 - mu1)/(x2 - x1)
beta0 <- mu1 - x1*(mu2 - mu1)/(x2 - x1)
mu1 ~ dnorm(m1, g1)
mu2 ~ dnorm(m2, g2)
invsigma2 ~ dgamma(a, b)
sigma <- sqrt(pow(invsigma2, -1))
}
"
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(gridExtra)
require(ProbBayes)
require(tidyverse)
require(runjags)
require(coda)
require(devtools)
crcblue <- "#2905a1"
knitr::opts_chunk$set(echo = TRUE)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(gridExtra)
require(ProbBayes)
require(tidyverse)
require(runjags)
require(coda)
require(devtools)
crcblue <- "#2905a1"
knitr::opts_chunk$set(echo = TRUE)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
## write the model
modelString <-"
model {
## sampling
for (i in 1:N){
y[i] ~ dnorm(beta0 + beta1*x[i], invsigma2)
}
## priors
beta1 <- (mu2 - mu1)/(x2 - x1)
beta0 <- mu1 - x1*(mu2 - mu1)/(x2 - x1)
mu1 ~ dnorm(m1, g1)
mu2 ~ dnorm(m2, g2)
invsigma2 ~ dgamma(a, b)
sigma <- sqrt(pow(invsigma2, -1))
}
"
library(readr)
CEData <- read_csv("CEsample.csv")
y <- as.vector(CEData$log_TotalExp)
x <- as.vector(CEData$log_TotalIncome)
N <- length(y)
the_data <- list("y" = y, "x" = x, "N" = N,
"x2" = 12, "x1" = 10,
"m1" = 8, "g1" = 1,
"m2" = 9, "g2" = 1,
"a" = 1, "b"=1)
initsfunction <- function(chain){
.RNG.seed <- c(1,2)[chain]
.RNG.name <- c("base::Super-Duper",
"base::Wichmann-Hill")[chain]
return(list(.RNG.seed=.RNG.seed,
.RNG.name=.RNG.name))
}
posterior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("beta0", "beta1", "sigma", "mu1", "mu2"),
adapt = 1000,
burnin = 5000,
sample = 5000,
thin = 1,
inits = initsfunction)
summary(posterior)
plot(posterior, vars="beta0")
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(gridExtra)
require(ProbBayes)
require(tidyverse)
require(runjags)
require(coda)
crcblue <- "#2905a1"
knitr::opts_chunk$set(echo = TRUE)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
install.packages("devtools")
require(devtools)
devtools::install_github("bayesball/ProbBayes")
require(utils)
require(ggplot2)
require(gridExtra)
require(ProbBayes)
require(tidyverse)
crcblue <- "#2905a1"
library(readr)
CEData <- read_csv("CEsample.csv")
g1 <- ggplot(CEData, aes(x = log_TotalIncome, y = log_TotalExp)) +
geom_point(size=1) +
labs(x = "log(Income)", y = "log(Expenditure)") +
theme_grey(base_size = 10, base_family = "")
g1
modelString <-"
model {
## sampling
for (i in 1:N){
y[i] ~ dnorm(beta0 + beta1*x[i], invsigma2)
}
## priors
beta0 ~ dnorm(mu0, g0)
beta1 ~ dnorm(mu1, g1)
invsigma2 ~ dgamma(a, b)
sigma <- sqrt(pow(invsigma2, -1))
}
"
y <- as.vector(CEData$log_TotalExp)
x <- as.vector(CEData$log_TotalIncome)
N <- length(y)
the_data <- list("y" = y, "x" = x, "N" = N,
"mu0" = 0, "g0" = 0.0001,
"mu1" = 0, "g1" = 0.0001,
"a" = 1, "b" = 1)
initsfunction <- function(chain){
.RNG.seed <- c(1,2)[chain]
.RNG.name <- c("base::Super-Duper",
"base::Wichmann-Hill")[chain]
return(list(.RNG.seed=.RNG.seed,
.RNG.name=.RNG.name))
}
posterior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("beta0", "beta1", "sigma"),
adapt = 1000,
burnin = 5000,
sample = 5000,
thin = 1,
inits = initsfunction)
summary(posterior)
plot(posterior, vars = "beta0")
plot(posterior, vars = "beta1")
plot(posterior, vars = "sigma")
posterior_new <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("beta0", "beta1", "sigma"),
adapt = 1000,
burnin = 5000,
sample = 5000,
thin = 50,
inits = initsfunction)
summary(posterior_new)
plot(posterior_new, vars = "beta0")
plot(posterior_new, vars = "beta1")
plot(posterior_new, vars = "sigma")
post <- as.mcmc(posterior_new)
post_means <- apply(post, 2, mean)
post <- as.data.frame(post)
ggplot(CEData, aes(log_TotalIncome, log_TotalExp)) +
geom_point(size=1) +
geom_abline(data=post[1:10, ],
aes(intercept=beta0, slope=beta1), alpha = 0.5) +
geom_abline(intercept = post_means[1],
slope = post_means[2], size = 1) +
ylab("log(Expenditure)") + xlab("log(Income)") +
theme_grey(base_size = 10, base_family = "")
post <- as.data.frame(post)
one_expected <- function(x){
lp <- post[ , "beta0"] +  x * post[ , "beta1"]
data.frame(Value = paste("log(Income) =", x),
Expected_logExp = lp)
}
df <- map_df(c(1, 5, 7, 9), one_expected)
require(ggridges)
ggplot(df, aes(x = Expected_logExp, y = Value)) +
geom_density_ridges() +
theme_grey(base_size = 8, base_family = "")
df <- map_df(c(10, 11, 12, 13), one_expected)
ggplot(df, aes(x = Expected_logExp, y = Value)) +
geom_density_ridges() +
theme_grey(base_size = 8, base_family = "")
df %>% group_by(Value) %>%
summarize(P05 = quantile(Expected_logExp, 0.05),
P50 = median(Expected_logExp),
P95 = quantile(Expected_logExp, 0.95))
one_predicted <- function(x){
lp <- post[ , "beta0"] +  x * post[ , "beta1"]
y <- rnorm(5000, lp, post[, "sigma"])
data.frame(Value = paste("Size =", x),
Predicted_logExp = y)
}
df <- map_df(c(1, 5, 7, 9), one_predicted)
require(ggridges)
ggplot(df, aes(x = Predicted_logExp, y = Value)) +
geom_density_ridges() +
theme_grey(base_size = 9, base_family = "")
post <- as.mcmc(posterior)
post_means <- apply(post, 2, mean)
post <- as.data.frame(post)
one_predicted <- function(x){
lp <- post[ , "beta0"] +  x * post[ , "beta1"]
y <- rnorm(5000, lp, post[, "sigma"])
data.frame(Value = paste("Size =", x),
Predicted_logExp = y)
}
df <- map_df(c(1, 5, 7, 9), one_predicted)
post <- as.mcmc(posterior)
post_means <- apply(post, 2, mean)
post <- as.data.frame(post)
one_predicted <- function(x){
lp <- post[ , "beta0"] +  x * post[ , "beta1"]
y <- rnorm(5000, lp, post[, "sigma"])
data.frame(Value = paste("Size =", x),
Predicted_logExp = y)
}
df <- map_df(c(1, 5, 7, 9), one_predicted)
require(ggridges)
ggplot(df, aes(x = Predicted_logExp, y = Value)) +
geom_density_ridges() +
theme_grey(base_size = 9, base_family = "")
df %>% group_by(Value) %>%
summarize(P05 = quantile(Predicted_logExp, 0.05),
P50 = median(Predicted_logExp),
P95 = quantile(Predicted_logExp, 0.95))
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(gridExtra)
require(ProbBayes)
require(tidyverse)
require(runjags)
require(coda)
require(devtools)
crcblue <- "#2905a1"
knitr::opts_chunk$set(echo = TRUE)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
library(readr)
TrueFalseScores <- read_csv("TrueFalseScores.csv")
View(TrueFalseScores)
modelString<-"
model {
## sampling
for (i in 1:N){
theta[i] <- equals(z[i], 1) * p1 + equals(z[i], 0) * p0
y[i] ~ dbin(theta[i], m)
}
for (i in 1:N){
z[i] ~ dbern(pi)
}
## priors
p1 ~ dbeta(1,1)T(0.4,0.6)
p0 ~ dbeta(1,1)T(0.5, 1)
pi ~ dbeta(a,b)
}
"
y <- TrueFalseScores$Score
N <- length(y)
initsfunction <- function(chain){
.RNG.seed <- c(1,2)[chain]
.RNG.name <- c("base::Super-Duper",
"base::Wichmann-Hill")[chain]
return(list(.RNG.seed=.RNG.seed,
.RNG.name=.RNG.name))
}
the_data <- list("y" = y, "N" = N, "m"=40, "a"=2, "b"=4)
posterior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("p1", "p0", "theta"),
adapt = 1000,
burnin = 5000,
sample = 5000,
thin = 10,
inits = initsfunction)
summary(posterior)
vars_list <- c("theta[1]", "theta[10]", "p0", "p1")
plot(posterior, vars=vars_list)
